import { Vec3 } from "./Vec3";
import { Vec4, V4Q } from "./Vec4";
declare class Quat extends Vec4 implements V4Q {
    constructor(...args: number[]);
    reset(...args: number[]): V4Q;
    resetToQuat(q: any): Quat;
    clone(): V4Q;
    toString(): string;
    multiply(q: V4Q): V4Q;
    multiplyNew(q: V4Q): V4Q;
    rotateX(origin: V4Q, rad: number): V4Q;
    rotateY(origin: V4Q, rad: number): V4Q;
    rotateZ(origin: V4Q, rad: number): V4Q;
    /**
     * Getters and setters
     */
    get normalW(): number;
    /**
     * Static methods
     */
    /**
     * Creates a quaternion from a given axis and rotation
     *
     * @static
     * @param {Vec3|Array} axis the axis around which to rotate
     * @param {Number} rad the angle in radians
     * @returns {Quat}
     **/
    static fromAxisAngle(axis: Vec3, rad: number): Quat;
    static fromEuler(euler: any, order?: string): Quat | void;
}
export { Quat };
