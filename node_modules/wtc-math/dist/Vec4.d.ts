interface V4Q {
    x: number;
    y: number;
    z: number;
    w: number;
    length: number;
    lengthSquared: number;
    width: number;
    height: number;
    depth: number;
    area: number;
    array: number[];
    xyzw: any;
    yzwx: any;
    zwxy: any;
    wxyz: any;
    xyz: any;
    yzx: any;
    zxy: any;
    xx: any;
    xy: any;
    xz: any;
    xw: any;
    yx: any;
    yy: any;
    yz: any;
    yw: any;
    zx: any;
    zy: any;
    zz: any;
    zw: any;
    wx: any;
    wy: any;
    wz: any;
    ww: any;
    reset(...args: number[]): V4Q;
    resetToVector(v: V4Q): V4Q;
    clone(): V4Q;
    rotateX(origin: V4Q, rad: number): V4Q;
    rotateXNew(origin: V4Q, rad: number): V4Q;
    rotateY(origin: V4Q, rad: number): V4Q;
    rotateYNew(origin: V4Q, rad: number): V4Q;
    rotateZ(origin: V4Q, rad: number): V4Q;
    rotateZNew(origin: V4Q, rad: number): V4Q;
    add(vector: V4Q): V4Q;
    addNew(vector: V4Q): V4Q;
    addScalar(scalar: number): V4Q;
    addScalarNew(scalar: number): V4Q;
    subtract(vector: V4Q): V4Q;
    subtractNew(vector: V4Q): V4Q;
    subtractScalar(scalar: number): V4Q;
    subtractScalarNew(scalar: number): V4Q;
    divide(vector: V4Q): V4Q;
    divideNew(vector: V4Q): V4Q;
    divideScalar(scalar: number): V4Q;
    divideScalarNew(scalar: number): V4Q;
    multiply(q: V4Q): V4Q;
    multiplyNew(q: V4Q): V4Q;
    multiplyScalar(scalar: number): V4Q;
    multiplyScalarNew(scalar: number): V4Q;
    scale(scalar: number): V4Q;
    scaleNew(scalar: number): V4Q;
    transformByMat4(m: any): V4Q;
    transformByMat4New(m: any): V4Q;
    transformByQuat(q: any): V4Q;
    transformByQuatNew(q: any): V4Q;
    negate(): V4Q;
    negateNew(): V4Q;
    inverse(): V4Q;
    inverseNew(): V4Q;
    normalise(): V4Q;
    normaliseNew(): V4Q;
    distance(vector: V4Q): number;
    distanceX(vector: V4Q): number;
    distanceY(vector: V4Q): number;
    distanceZ(vector: V4Q): number;
    distanceW(vector: V4Q): number;
    dot(vector: V4Q): number;
    cross(v: V4Q, w: V4Q): V4Q;
    crossNew(v: V4Q, w: V4Q): V4Q;
    ceil(): V4Q;
    ceilNew(): V4Q;
    floor(): V4Q;
    floorNew(): V4Q;
    round(): V4Q;
    roundNew(): V4Q;
    fract(): V4Q;
    fractNew(): V4Q;
}
/**
 * A basic 3D Vector class that provides simple algebraic functionality in the form
 * of 3D Vectors.
 *
 * We use Getters/setters for both principle properties (x & y) as well as virtual
 * properties (rotation, length etc.).
 *
 * @class Vec4
 * @author Liam Egan <liam@wethecollective.com>
 * @version 1.0.0
 * @created Jan 07, 2020
 */
declare class Vec4 implements V4Q {
    /**
     * The Vector Class constructor
     *
     * @constructor
     * @param {number} x 				The x coord
     * @param {number} y 				The y coord
     */
    constructor(...args: number[]);
    /**
     * Resets the vector coordinates
     *
     * @public
     * @chainable
     * @param {number} x 	The x coord
     * @param {number} y 	The y coord
     * @param {number} z 	The z coord
     * @param {number} w 	The w coord
     */
    reset(...args: number[]): V4Q;
    /**
     * Resets the vector coordinates to another vector object
     *
     * @public
     * @chainable
     * @param {Vec4} v 				The vector object to use to reset the coordinates
     */
    resetToVector(v: V4Q): V4Q;
    /**
     * Clones the vector
     *
     * @public
     * @return {Vec4}					The cloned vector
     */
    clone(): V4Q;
    /**
     * Adds one vector to another.
     *
     * @public
     * @chainable
     * @param  {Vec4}  vector The vector to add to this one
     * @return {Vec4}					Returns itself, modified
     */
    add(vector: V4Q): V4Q;
    /**
     * Clones the vector and adds the vector to it instead
     *
     * @public
     * @chainable
     * @param  {Vec4}  vector The vector to add to this one
     * @return {Vec4}					Returns the clone of itself, modified
     */
    addNew(vector: V4Q): V4Q;
    /**
     * Adds a scalar to the vector, modifying both the x and y
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to add to the vector
     * @return {Vec4}					Returns itself, modified
     */
    addScalar(scalar: number): V4Q;
    /**
     * Clones the vector and adds the scalar to it instead
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to add to the vector
     * @return {Vec4}					Returns the clone of itself, modified
     */
    addScalarNew(scalar: number): V4Q;
    /**
     * Subtracts one vector from another.
     *
     * @public
     * @chainable
     * @param  {Vec4}  vector The vector to subtract from this one
     * @return {Vec4}					Returns itself, modified
     */
    subtract(vector: V4Q): V4Q;
    /**
     * Clones the vector and subtracts the vector from it instead
     *
     * @public
     * @chainable
     * @param  {Vec4}  vector The vector to subtract from this one
     * @return {Vec4}					Returns the clone of itself, modified
     */
    subtractNew(vector: V4Q): V4Q;
    /**
     * Subtracts a scalar from the vector, modifying both the x and y
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to subtract from the vector
     * @return {Vec4}					Returns itself, modified
     */
    subtractScalar(scalar: number): V4Q;
    /**
     * Clones the vector and subtracts the scalar from it instead
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to add to the vector
     * @return {Vec4}					Returns the clone of itself, modified
     */
    subtractScalarNew(scalar: number): V4Q;
    /**
     * Divides one vector by another.
     *
     * @public
     * @chainable
     * @param  {Vec4}  vector The vector to divide this by
     * @return {Vec4}					Returns itself, modified
     */
    divide(vector: V4Q): V4Q;
    /**
     * Clones the vector and divides it by the vector instead
     *
     * @public
     * @chainable
     * @param  {Vec4}  vector The vector to divide the clone by
     * @return {Vec4}					Returns the clone of itself, modified
     */
    divideNew(vector: V4Q): V4Q;
    /**
     * Divides the vector by a scalar.
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to divide both x and y by
     * @return {Vec4}					Returns itself, modified
     */
    divideScalar(scalar: number): V4Q;
    /**
     * Clones the vector and divides it by the provided scalar.
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to divide both x and y by
     * @return {Vec4}					Returns the clone of itself, modified
     */
    divideScalarNew(scalar: number): V4Q;
    /**
     * Multiplies one vector by another.
     *
     * @public
     * @chainable
     * @param  {Vec4}  vector The vector to multiply this by
     * @return {Vec4}					Returns itself, modified
     */
    multiply(vector: V4Q): V4Q;
    /**
     * Clones the vector and multiplies it by the vector instead
     *
     * @public
     * @chainable
     * @param  {Vec4}  vector The vector to multiply the clone by
     * @return {Vec4}					Returns the clone of itself, modified
     */
    multiplyNew(q: V4Q): V4Q;
    /**
     * Multiplies the vector by a scalar.
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to multiply both x and y by
     * @return {Vec4}					Returns itself, modified
     */
    multiplyScalar(scalar: number): V4Q;
    /**
     * Clones the vector and multiplies it by the provided scalar.
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to multiply both x and y by
     * @return {Vec4}					Returns the clone of itself, modified
     */
    multiplyScalarNew(scalar: number): V4Q;
    /**
     * Alias of {@link Vector#multiplyScalar__anchor multiplyScalar}
     */
    scale(scalar: number): V4Q;
    /**
     * Alias of {@link Vector#multiplyScalarNew__anchor multiplyScalarNew}
     */
    scaleNew(scalar: number): V4Q;
    rotateX(origin: V4Q, radian: number): V4Q;
    rotateXNew(origin: V4Q, radian: number): V4Q;
    rotateY(origin: V4Q, radian: number): V4Q;
    rotateYNew(origin: V4Q, radian: number): V4Q;
    rotateZ(origin: V4Q, radian: number): V4Q;
    rotateZNew(origin: V4Q, radian: number): V4Q;
    transformByMat4(m: any): V4Q;
    transformByMat4New(m: any): V4Q;
    transformByQuat(q: any): V4Q;
    transformByQuatNew(q: any): V4Q;
    /**
     * Negates the vector.
     *
     * @public
     * @chainable
     * @return {Vec4}					Returns itself, modified
     */
    negate(): V4Q;
    /**
     * Clones the vector and negates it.
     *
     * @public
     * @chainable
     * @return {Vec4}					Returns itself, modified
     */
    negateNew(): V4Q;
    /**
     * Inverses the vector.
     *
     * @public
     * @chainable
     * @return {Vec4}					Returns itself, modified
     */
    inverse(): V4Q;
    /**
     * Clones the vector and then inverses it.
     *
     * @public
     * @chainable
     * @return {Vec4}					Returns itself, modified
     */
    inverseNew(): V4Q;
    /**
     * Normalises the vector down to a length of 1 unit
     *
     * @public
     * @chainable
     * @return {Vec4}					Returns itself, modified
     */
    normalise(): V4Q;
    /**
     * Clones the vector and normalises it
     *
     * @public
     * @chainable
     * @return {Vec4}					Returns a clone of itself, modified
     */
    normaliseNew(): V4Q;
    /**
     * Calculates the distance between this and the supplied vector
     *
     * @param  {Vec4} vector The vector to calculate the distance from
     * @return {number}        The distance between this and the supplied vector
     */
    distance(vector: V4Q): number;
    /**
     * Calculates the distance on the X axis between this and the supplied vector
     *
     * @param  {Vec4} vector The vector to calculate the distance from
     * @return {number}        The distance, along the x axis, between this and the supplied vector
     */
    distanceX(vector: V4Q): number;
    /**
     * Calculated the distance on the Y axis between this and the supplied vector
     *
     * @param  {Vec4} vector The vector to calculate the distance from
     * @return {number}        The distance, along the y axis, between this and the supplied vector
     */
    distanceY(vector: V4Q): number;
    /**
     * Calculated the distance on the Z axis between this and the supplied vector
     *
     * @param  {Vec4} vector The vector to calculate the distance from
     * @return {number}        The distance, along the y axis, between this and the supplied vector
     */
    distanceZ(vector: V4Q): number;
    /**
     * Calculated the distance on the W axis between this and the supplied vector
     *
     * @param  {Vec4} vector The vector to calculate the distance from
     * @return {number}        The distance, along the y axis, between this and the supplied vector
     */
    distanceW(vector: V4Q): number;
    /**
     * Calculates the dot product between this and a supplied vector
     *
     * @example
     * // returns -14
     * new Vector(2, -3).dot(new Vector(-4, 2))
     * new Vector(-4, 2).dot(new Vector(2, -3))
     * new Vector(2, -4).dot(new Vector(-3, 2))
     *
     * @param  {Vec4} vector The vector object against which to calculate the dot product
     * @return {number}        The dot product of the two vectors
     */
    dot(vector: V4Q): number;
    /**
     * Calculates the cross product between this and two other supplied vectors
     *
     * @example
     * // returns -2
     * new Vector(2, -3).cross(new Vector(-4, 2))
     * new Vector(-4, 2).cross(new Vector(2, -3))
     * // returns 2
     * new Vector(2, -4).cross(new Vector(-3, 2))
     *
     * @param  {Vec4} vector The vector object against which to calculate the cross product
     * @return {Vec4}        The cross product of the two vectors
     */
    cross(v: V4Q, w: V4Q): V4Q;
    crossNew(v: V4Q, w: V4Q): V4Q;
    ceil(): V4Q;
    ceilNew(): V4Q;
    floor(): V4Q;
    floorNew(): V4Q;
    round(): V4Q;
    roundNew(): V4Q;
    fract(): V4Q;
    fractNew(): V4Q;
    /**
     * Getters and setters
     */
    /**
     * (getter/setter) The x value of the vector.
     *
     * @type {number}
     * @default 0
     */
    private _x;
    set x(x: number);
    get x(): number;
    /**
     * (getter/setter) The y value of the vector.
     *
     * @type {number}
     * @default 0
     */
    private _y;
    set y(y: number);
    get y(): number;
    /**
     * (getter/setter) The y value of the vector.
     *
     * @type {number}
     * @default 0
     */
    private _z;
    set z(z: number);
    get z(): number;
    /**
     * (getter/setter) The y value of the vector.
     *
     * @type {number}
     * @default 0
     */
    private _w;
    set w(w: number);
    get w(): number;
    /**
     * (getter/setter) The length of the vector presented as a square. If you're using
     * length for comparison, this is quicker.
     *
     * @type {number}
     * @default 0
     */
    set lengthSquared(length: number);
    get lengthSquared(): number;
    /**
     * (getter/setter) The length of the vector
     *
     * @type {number}
     * @default 0
     */
    set length(length: number);
    get length(): number;
    /**
     * (getter/setter) Vector width.
     * Alias of {@link Vector#x x}
     *
     * @type {number}
     */
    set width(w: number);
    get width(): number;
    /**
     * (getter/setter) Vector height.
     * Alias of {@link Vector#x x}
     *
     * @type {number}
     */
    set height(h: number);
    get height(): number;
    /**
     * (getter/setter) Vector height.
     * Alias of {@link Vector#x x}
     *
     * @type {number}
     */
    set depth(h: number);
    get depth(): number;
    /**
     * (getter) Vector area.
     * @readonly
     *
     * @type {number}
     */
    get area(): number;
    /**
     * (getter) Returns the basic array representation of this vector.
     * @readonly
     *
     * @type {number}
     */
    get array(): number[];
    /**
     * (getter/sette) Swizzle XYZW
     *
     * @type {Vec4}
     */
    get xyzw(): any;
    set xyzw(v: any);
    /**
     * (getter/sette) Swizzle XYZW
     *
     * @type {Vec4}
     */
    get yzwx(): any;
    set yzwx(v: any);
    /**
     * (getter/sette) Swizzle XYZW
     *
     * @type {Vec4}
     */
    get zwxy(): any;
    set zwxy(v: any);
    /**
     * (getter/sette) Swizzle XYZW
     *
     * @type {Vec4}
     */
    get wxyz(): any;
    set wxyz(v: any);
    /**
     * (getter/sette) Swizzle YZX
     *
     * @type {Vec3}
     */
    get xyz(): any;
    set xyz(v: any);
    /**
     * (getter/sette) Swizzle YZX
     *
     * @type {Vec3}
     */
    get yzx(): any;
    set yzx(v: any);
    /**
     * (getter/sette) Swizzle ZXY
     *
     * @type {Vec3}
     */
    get zxy(): any;
    set zxy(v: any);
    /**
     * (getter/sette) Swizzle XX
     *
     * @type {number}
     */
    get xx(): any;
    set xx(v: any);
    /**
     * (getter/sette) Swizzle XY
     *
     * @type {Vec2}
     */
    get xy(): any;
    set xy(v: any);
    /**
     * (getter/sette) Swizzle XY
     *
     * @type {Vec2}
     */
    get xz(): any;
    set xz(v: any);
    /**
     * (getter/sette) Swizzle XY
     *
     * @type {Vec2}
     */
    get xw(): any;
    set xw(v: any);
    /**
     * (getter/sette) Swizzle YX
     *
     * @type {number}
     */
    get yx(): any;
    set yx(v: any);
    /**
     * (getter/sette) Swizzle YY
     *
     * @type {number}
     */
    get yy(): any;
    set yy(v: any);
    /**
     * (getter/sette) Swizzle YZ
     *
     * @type {Vec2}
     */
    get yz(): any;
    set yz(v: any);
    /**
     * (getter/sette) Swizzle YZ
     *
     * @type {Vec2}
     */
    get yw(): any;
    set yw(v: any);
    /**
     * (getter/sette) Swizzle zx
     *
     * @type {Vec2}
     */
    get zx(): any;
    set zx(v: any);
    /**
     * (getter/sette) Swizzle ZY
     *
     * @type {number}
     */
    get zy(): any;
    set zy(v: any);
    /**
     * (getter/sette) Swizzle ZZ
     *
     * @type {number}
     */
    get zz(): any;
    set zz(v: any);
    /**
     * (getter/sette) Swizzle XY
     *
     * @type {Vec2}
     */
    get zw(): any;
    set zw(v: any);
    /**
     * (getter/sette) Swizzle wx
     *
     * @type {Vec2}
     */
    get wx(): any;
    set wx(v: any);
    /**
     * (getter/sette) Swizzle WY
     *
     * @type {number}
     */
    get wy(): any;
    set wy(v: any);
    /**
     * (getter/sette) Swizzle WZ
     *
     * @type {number}
     */
    get wz(): any;
    set wz(v: any);
    /**
     * (getter/sette) Swizzle WW
     *
     * @type {Vec2}
     */
    get ww(): any;
    set ww(v: any);
    /**
     * Static methods
     */
    /**
     * Iterpolates a provided anonymous value into a vew Vec4
     *
     * @param {Vec4|array|string|number} v The value to interpolate
     * @returns {Vec4} out
     */
    static interpolate(v: any): Vec4;
    /**
     * Performs a linear interpolation between two Vec4's
     *
     * @param {Vec4} v1 the first operand
     * @param {Vec4} v2 the second operand
     * @param {Number} d interpolation amount in the range of 0 - 1
     * @returns {Vec4}
     */
    static lerp(v1: any, v2: any, d: any): Vec4;
    static getAngle(a: any, b: any): number;
}
export { Vec4, V4Q };
