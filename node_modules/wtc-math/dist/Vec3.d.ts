/**
 * A basic 3D Vector class that provides simple algebraic functionality in the form
 * of 3D Vectors.
 *
 * We use Getters/setters for both principle properties (x & y) as well as virtual
 * properties (rotation, length etc.).
 *
 * @class Vec3
 * @author Liam Egan <liam@wethecollective.com>
 * @version 1.0.0
 * @created Jan 07, 2020
 */
declare class Vec3 {
    #private;
    /**
     * The Vector Class constructor
     *
     * @constructor
     * @param {number} x 				The x coord
     * @param {number} y 				The y coord
     * @param {number} z 				The z coord
     */
    constructor(...args: number[]);
    /**
     * Resets the vector coordinates
     *
     * @public
     * @chainable
     * @param {number} x 				The x coord
     * @param {number} y 				The y coord
     * @param {number} z 				The z coord
     */
    reset(...args: number[]): Vec3;
    /**
     * Resets the vector coordinates to another vector object
     *
     * @public
     * @chainable
     * @param {Vec3} v 				The vector object to use to reset the coordinates
     */
    resetToVector(v: Vec3): Vec3;
    /**
     * Clones the vector
     *
     * @public
     * @return {Vec3}					The cloned vector
     */
    clone(): Vec3;
    /**
     * Adds one vector to another.
     *
     * @public
     * @chainable
     * @param  {Vec3}  vector The vector to add to this one
     * @return {Vec3}					Returns itself, modified
     */
    add(vector: Vec3): Vec3;
    /**
     * Clones the vector and adds the vector to it instead
     *
     * @public
     * @chainable
     * @param  {Vec3}  vector The vector to add to this one
     * @return {Vec3}					Returns the clone of itself, modified
     */
    addNew(vector: Vec3): Vec3;
    /**
     * Adds a scalar to the vector, modifying both the x and y
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to add to the vector
     * @return {Vec3}					Returns itself, modified
     */
    addScalar(scalar: number): Vec3;
    /**
     * Clones the vector and adds the scalar to it instead
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to add to the vector
     * @return {Vec3}					Returns the clone of itself, modified
     */
    addScalarNew(scalar: number): Vec3;
    /**
     * Subtracts one vector from another.
     *
     * @public
     * @chainable
     * @param  {Vec3}  vector The vector to subtract from this one
     * @return {Vec3}					Returns itself, modified
     */
    subtract(vector: Vec3): Vec3;
    /**
     * Clones the vector and subtracts the vector from it instead
     *
     * @public
     * @chainable
     * @param  {Vec3}  vector The vector to subtract from this one
     * @return {Vec3}					Returns the clone of itself, modified
     */
    subtractNew(vector: Vec3): Vec3;
    /**
     * Subtracts a scalar from the vector, modifying both the x and y
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to subtract from the vector
     * @return {Vec3}					Returns itself, modified
     */
    subtractScalar(scalar: number): Vec3;
    /**
     * Clones the vector and subtracts the scalar from it instead
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to add to the vector
     * @return {Vec3}					Returns the clone of itself, modified
     */
    subtractScalarNew(scalar: number): Vec3;
    /**
     * Divides one vector by another.
     *
     * @public
     * @chainable
     * @param  {Vec3}  vector The vector to divide this by
     * @return {Vec3}					Returns itself, modified
     */
    divide(vector: Vec3): Vec3;
    /**
     * Clones the vector and divides it by the vector instead
     *
     * @public
     * @chainable
     * @param  {Vec3}  vector The vector to divide the clone by
     * @return {Vec3}					Returns the clone of itself, modified
     */
    divideNew(vector: Vec3): Vec3;
    /**
     * Divides the vector by a scalar.
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to divide both x and y by
     * @return {Vec3}					Returns itself, modified
     */
    divideScalar(scalar: number): Vec3;
    /**
     * Clones the vector and divides it by the provided scalar.
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to divide both x and y by
     * @return {Vec3}					Returns the clone of itself, modified
     */
    divideScalarNew(scalar: number): Vec3;
    /**
     * Multiplies one vector by another.
     *
     * @public
     * @chainable
     * @param  {Vec3}  vector The vector to multiply this by
     * @return {Vec3}					Returns itself, modified
     */
    multiply(vector: Vec3): Vec3;
    /**
     * Clones the vector and multiplies it by the vector instead
     *
     * @public
     * @chainable
     * @param  {Vec3}  vector The vector to multiply the clone by
     * @return {Vec3}					Returns the clone of itself, modified
     */
    multiplyNew(vector: Vec3): Vec3;
    /**
     * Multiplies the vector by a scalar.
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to multiply both x and y by
     * @return {Vec3}					Returns itself, modified
     */
    multiplyScalar(scalar: number): Vec3;
    /**
     * Clones the vector and multiplies it by the provided scalar.
     *
     * @public
     * @chainable
     * @param  {number}  scalar The scalar to multiply both x and y by
     * @return {Vec3}					Returns the clone of itself, modified
     */
    multiplyScalarNew(scalar: number): Vec3;
    /**
     * Alias of {@link Vector#multiplyScalar__anchor multiplyScalar}
     */
    scale(scalar: number): Vec3;
    /**
     * Alias of {@link Vector#multiplyScalarNew__anchor multiplyScalarNew}
     */
    scaleNew(scalar: number): Vec3;
    rotateX(origin: Vec3, radian: number): Vec3;
    rotateXNew(origin: Vec3, radian: number): Vec3;
    rotateY(origin: Vec3, radian: number): Vec3;
    rotateyNew(origin: Vec3, radian: number): Vec3;
    rotateZ(origin: Vec3, radian: number): Vec3;
    rotateZNew(origin: Vec3, radian: number): Vec3;
    transformByMat4(m: any): Vec3;
    transformByMat4New(m: any): Vec3;
    transformByMat3(m: any): Vec3;
    transformByMat3New(m: any): Vec3;
    transformByQuat(q: any): Vec3;
    transformByQuatNew(q: any): Vec3;
    /**
     * Negates the vector.
     *
     * @public
     * @chainable
     * @return {Vec3}					Returns itself, modified
     */
    negate(): Vec3;
    /**
     * Clones the vector and negates it.
     *
     * @public
     * @chainable
     * @return {Vec3}					Returns itself, modified
     */
    negateNew(): Vec3;
    /**
     * Inverses the vector.
     *
     * @public
     * @chainable
     * @return {Vec3}					Returns itself, modified
     */
    inverse(): Vec3;
    /**
     * Clones the vector and then inverses it.
     *
     * @public
     * @chainable
     * @return {Vec3}					Returns itself, modified
     */
    inverseNew(): Vec3;
    /**
     * Normalises the vector down to a length of 1 unit
     *
     * @public
     * @chainable
     * @return {Vec3}					Returns itself, modified
     */
    normalise(): Vec3;
    /**
     * Clones the vector and normalises it
     *
     * @public
     * @chainable
     * @return {Vec3}					Returns a clone of itself, modified
     */
    normaliseNew(): Vec3;
    /**
     * Calculates the distance between this and the supplied vector
     *
     * @param  {Vec3} vector The vector to calculate the distance from
     * @return {number}        The distance between this and the supplied vector
     */
    distance(vector: Vec3): number;
    /**
     * Calculates the distance on the X axis between this and the supplied vector
     *
     * @param  {Vec3} vector The vector to calculate the distance from
     * @return {number}        The distance, along the x axis, between this and the supplied vector
     */
    distanceX(vector: Vec3): number;
    /**
     * Calculated the distance on the Y axis between this and the supplied vector
     *
     * @param  {Vec3} vector The vector to calculate the distance from
     * @return {number}        The distance, along the y axis, between this and the supplied vector
     */
    distanceY(vector: Vec3): number;
    /**
     * Calculated the distance on the Z axis between this and the supplied vector
     *
     * @param  {Vec3} vector The vector to calculate the distance from
     * @return {number}        The distance, along the y axis, between this and the supplied vector
     */
    distanceZ(vector: Vec3): number;
    /**
     * Calculates the dot product between this and a supplied vector
     *
     * @example
     * // returns -14
     * new Vector(2, -3).dot(new Vector(-4, 2))
     * new Vector(-4, 2).dot(new Vector(2, -3))
     * new Vector(2, -4).dot(new Vector(-3, 2))
     *
     * @param  {Vec3} vector The vector object against which to calculate the dot product
     * @return {number}        The dot product of the two vectors
     */
    dot(vector: Vec3): number;
    /**
     * Calculates the cross product between this and the supplied vector.
     *
     * @example
     * // returns -2
     * new Vector(2, -3).cross(new Vector(-4, 2))
     * new Vector(-4, 2).cross(new Vector(2, -3))
     * // returns 2
     * new Vector(2, -4).cross(new Vector(-3, 2))
     *
     * @param  {Vec3} vector The vector object against which to calculate the cross product
     * @return {Vec3}        The cross product of the two vectors
     */
    cross(vector: Vec3): Vec3;
    crossNew(vector: Vec3): Vec3;
    ceil(): Vec3;
    ceilNew(): Vec3;
    floor(): Vec3;
    floorNew(): Vec3;
    round(): Vec3;
    roundNew(): Vec3;
    fract(): Vec3;
    fractNew(): Vec3;
    set x(x: number);
    get x(): number;
    set y(y: number);
    get y(): number;
    set z(z: number);
    get z(): number;
    /**
     * (getter/setter) The length of the vector presented as a square. If you're using
     * length for comparison, this is quicker.
     *
     * @type {number}
     * @default 0
     */
    set lengthSquared(length: number);
    get lengthSquared(): number;
    /**
     * (getter/setter) The length of the vector
     *
     * @type {number}
     * @default 0
     */
    set length(length: number);
    get length(): number;
    /**
     * (getter/setter) Spherical radius. For using a vec3 as spherical coordinates.
     * Alias of {@link Vector#x x}
     *
     * @type {number}
     */
    set radius(s: number);
    get radius(): number;
    /**
     * (getter/setter) Spherical phi. For using a vec3 as spherical coordinates.
     * Alias of {@link Vector#y y}
     *
     * @type {number}
     */
    set phi(p: number);
    get phi(): number;
    /**
     * (getter/setter) Spherical theta. For using a vec3 as spherical coordinates.
     * Alias of {@link Vector#z z}
     *
     * @type {number}
     */
    set theta(t: number);
    get theta(): number;
    /**
     * (getter/setter) Vector width.
     * Alias of {@link Vector#x x}
     *
     * @type {number}
     */
    set width(w: number);
    get width(): number;
    /**
     * (getter/setter) Vector height.
     * Alias of {@link Vector#x x}
     *
     * @type {number}
     */
    set height(h: number);
    get height(): number;
    /**
     * (getter/setter) Vector height.
     * Alias of {@link Vector#x x}
     *
     * @type {number}
     */
    set depth(h: number);
    get depth(): number;
    /**
     * (getter) Vector area.
     * @readonly
     *
     * @type {number}
     */
    get area(): number;
    /**
     * (getter) Returns the basic array representation of this vector.
     * @readonly
     *
     * @type {number}
     */
    get array(): number[];
    /**
     * (getter/sette) Swizzle XYZ
     *
     * @type {Vec3}
     */
    get xyz(): any;
    set xyz(v: any);
    /**
     * (getter/sette) Swizzle YZX
     *
     * @type {Vec3}
     */
    get yzx(): any;
    set yzx(v: any);
    /**
     * (getter/sette) Swizzle ZXY
     *
     * @type {Vec3}
     */
    get zxy(): any;
    set zxy(v: any);
    /**
     * (getter/sette) Swizzle XY
     *
     * @type {Vec2}
     */
    get xy(): any;
    set xy(v: any);
    /**
     * (getter/sette) Swizzle YZ
     *
     * @type {Vec2}
     */
    get yz(): any;
    set yz(v: any);
    /**
     * (getter/sette) Swizzle zx
     *
     * @type {Vec2}
     */
    get zx(): any;
    set zx(v: any);
    /**
     * (getter/sette) Swizzle YX
     *
     * @type {number}
     */
    get yx(): any;
    set yx(v: any);
    /**
     * (getter/sette) Swizzle ZY
     *
     * @type {number}
     */
    get zy(): any;
    set zy(v: any);
    /**
     * (getter/sette) Swizzle XX
     *
     * @type {number}
     */
    get xx(): any;
    set xx(v: any);
    /**
     * (getter/sette) Swizzle YY
     *
     * @type {number}
     */
    get yy(): any;
    set yy(v: any);
    /**
     * (getter/sette) Swizzle ZZ
     *
     * @type {number}
     */
    get zz(): any;
    set zz(v: any);
    /**
     * Static methods
     */
    /**
     * Iterpolates a provided anonymous value into a vew Vec3
     *
     * @param {Vec3|array|string|number} v The value to interpolate
     * @returns {Vec3} out
     */
    static interpolate(v: any): Vec3;
    /**
     * Performs a linear interpolation between two Vec3's
     *
     * @param {Vec3} v1 the first operand
     * @param {Vec3} v2 the second operand
     * @param {Number} d interpolation amount in the range of 0 - 1
     * @returns {Vec3}
     */
    static lerp(v1: Vec3, v2: Vec3, d: any): Vec3;
    static getAngle(a: Vec3, b: Vec3): number;
    static fromRotationMatrix(m: any, order?: String): Vec3 | void;
}
export { Vec3 };
