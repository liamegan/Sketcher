declare class Mat2 {
    #private;
    constructor(...args: number[]);
    reset(a11: number, a12: number, a21: number, a22: number): Mat2;
    resetToMat2(m: Mat2): Mat2;
    clone(): Mat2;
    transpose(): Mat2;
    transposeNew(): Mat2;
    add(m: Mat2): Mat2;
    addNew(m: Mat2): Mat2;
    subtract(m: Mat2): Mat2;
    subtractNew(m: Mat2): Mat2;
    multiply(m: Mat2): Mat2;
    multiplyNew(m: Mat2): Mat2;
    multiplyScalar(s: number): Mat2;
    multiplyScalarNew(s: number): Mat2;
    scale(s: number): Mat2;
    scaleNew(s: number): Mat2;
    scaleByVec2(v: any): Mat2;
    scaleByVec2New(v: any): Mat2;
    rotate(r: number): Mat2;
    rotateNew(r: number): Mat2;
    invert(): Mat2;
    invertNew(): Mat2;
    /**
     * Calculates the adjugate of a mat2
     *
     * @returns {mat2} out
     */
    adjoint(): Mat2;
    adjointNew(): Mat2;
    toString(): string;
    set a11(v: number);
    get a11(): number;
    set a12(v: number);
    get a12(): number;
    set a21(v: number);
    get a21(): number;
    set a22(v: number);
    get a22(): number;
    get determinant(): number;
    /**
     * (getter) Returns the basic array representation of this matrix.
     * @readonly
     *
     * @type {array}
     */
    get array(): number[];
    /**
     * (getter) Returns the basic array representation of this matrix.
     * this returns the array in column-major form.
     * @readonly
     *
     * @type {array}
     */
    get columnArray(): number[];
    static fromAngle(r: number): Mat2;
    static fromScalingVec2(v: any): Mat2;
    static identity(): Mat2;
}
export { Mat2 };
